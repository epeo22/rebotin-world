/**
 * @author: Alexis Marechal
 */
grammar edu.upb.lp.Rebotinol with org.eclipse.xtext.common.Terminals

generate rebotinol "http://lp.upb.org/Rebotinol"

RebotinolProgram:
	(instructions+=Instruction)+
;

Instruction:
	EmptyInstruction | NonEmptyInstruction;

EmptyInstruction:
	type = EmptyInstructionType;

enum EmptyInstructionType:
	der="DER" | izq="IZQ" | arr="ARR" | aba="ABA" | memo="MEMO" | escri="ESCRI" | 
	suma="SUMA" | signo="SIGNO" | Mult="MULT" |	Inver="INVER" |
	Enviar="ENVIAR" | EnviarMatriz="ENVIAR MATRIZ";

NonEmptyInstruction:
	Sumak | Multk | ComplexInstruction;
	
ComplexInstruction:
	Igual | Igualk | Difer| Diferk | Mayor | Mayork | Menor | Menork | Repetirn;

Number:
	PositiveNumber | NegativeNumber;

PositiveNumber:
	Integer ({Fraction.numerator = current} "/" denominator=Integer)?;

Integer:
	value = INT;

NegativeNumber:
	"-" val=PositiveNumber;

Sumak:
	"SUMA" val=Number;
	
Multk:
	"MULT" val=Number;
	
Igual:
	"IGUAL" "{" (subInstructions+=Instruction)+ "}";
	
Igualk:
	"IGUAL" val=Number "{" (subInstructions+=Instruction)+ "}";
	
Difer:
	"DIFER" "{" (subInstructions+=Instruction)+ "}";
	
Diferk:
	"DIFER" val=Number "{" (subInstructions+=Instruction)+ "}";
	
Mayor:
	"MAYOR" "{" (subInstructions+=Instruction)+ "}";
	
Mayork:
	"MAYOR" val=Number "{" (subInstructions+=Instruction)+ "}";
	
Menor:
	"MENOR" "{" (subInstructions+=Instruction)+ "}";
	
Menork:
	"MENOR" val=Number "{" (subInstructions+=Instruction)+ "}";
	
Repetirn:
	"REP" val=INT "{" (subInstructions+=Instruction)+ "}";