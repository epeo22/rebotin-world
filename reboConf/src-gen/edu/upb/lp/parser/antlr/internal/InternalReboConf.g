/*
* generated by Xtext
*/
grammar InternalReboConf;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package edu.upb.lp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.upb.lp.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.upb.lp.services.ReboConfGrammarAccess;

}

@parser::members {

 	private ReboConfGrammarAccess grammarAccess;
 	
    public InternalReboConfParser(TokenStream input, ReboConfGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Configuration";	
   	}
   	
   	@Override
   	protected ReboConfGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	 iv_ruleConfiguration=ruleConfiguration 
	 { $current=$iv_ruleConfiguration.current; } 
	 EOF 
;

// Rule Configuration
ruleConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Matriz inicial:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConfigurationAccess().getMatrizInicialKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getInitialMatrixParserRuleCall_1_0()); 
	    }
		lv_initial_1_0=ruleMatrix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		set(
       			$current, 
       			"initial",
        		lv_initial_1_0, 
        		"Matrix");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_2='Matriz esperada: ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConfigurationAccess().getMatrizEsperadaKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getExpectedMatrixParserRuleCall_2_0_1_0()); 
	    }
		lv_expected_3_0=ruleMatrix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		set(
       			$current, 
       			"expected",
        		lv_expected_3_0, 
        		"Matrix");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='Correo esperado: ' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConfigurationAccess().getCorreoEsperadoKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getMailNumberParserRuleCall_2_1_1_0()); 
	    }
		lv_mail_5_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		set(
       			$current, 
       			"mail",
        		lv_mail_5_0, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleMatrix
entryRuleMatrix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMatrixRule()); }
	 iv_ruleMatrix=ruleMatrix 
	 { $current=$iv_ruleMatrix.current; } 
	 EOF 
;

// Rule Matrix
ruleMatrix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_filas_0_0=RULE_INT
		{
			newLeafNode(lv_filas_0_0, grammarAccess.getMatrixAccess().getFilasINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMatrixRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"filas",
        		lv_filas_0_0, 
        		"INT");
	    }

)
)	otherlv_1='x' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMatrixAccess().getXKeyword_1());
    }
(
(
		lv_columnas_2_0=RULE_INT
		{
			newLeafNode(lv_columnas_2_0, grammarAccess.getMatrixAccess().getColumnasINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMatrixRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"columnas",
        		lv_columnas_2_0, 
        		"INT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMatrixAccess().getLinesLineParserRuleCall_3_0()); 
	    }
		lv_lines_3_0=ruleLine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatrixRule());
	        }
       		add(
       			$current, 
       			"lines",
        		lv_lines_3_0, 
        		"Line");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleLine
entryRuleLine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLineRule()); }
	 iv_ruleLine=ruleLine 
	 { $current=$iv_ruleLine.current; } 
	 EOF 
;

// Rule Line
ruleLine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLineAccess().getElsElementParserRuleCall_0_0()); 
	    }
		lv_els_0_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLineRule());
	        }
       		add(
       			$current, 
       			"els",
        		lv_els_0_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLineAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLineAccess().getElsElementParserRuleCall_1_1_0()); 
	    }
		lv_els_2_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLineRule());
	        }
       		add(
       			$current, 
       			"els",
        		lv_els_2_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getNumberParserRuleCall_0()); 
    }
    this_Number_0=ruleNumber
    { 
        $current = $this_Number_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getEmptyParserRuleCall_1()); 
    }
    this_Empty_1=ruleEmpty
    { 
        $current = $this_Empty_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEmpty
entryRuleEmpty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmptyRule()); }
	 iv_ruleEmpty=ruleEmpty 
	 { $current=$iv_ruleEmpty.current; } 
	 EOF 
;

// Rule Empty
ruleEmpty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEmptyAccess().getEmptyAction_0(),
            $current);
    }
)	otherlv_1='_' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEmptyAccess().get_Keyword_1());
    }
)
;





// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current; } 
	 EOF 
;

// Rule Number
ruleNumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberAccess().getPositiveNumberParserRuleCall_0()); 
    }
    this_PositiveNumber_0=rulePositiveNumber
    { 
        $current = $this_PositiveNumber_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberAccess().getNegativeNumberParserRuleCall_1()); 
    }
    this_NegativeNumber_1=ruleNegativeNumber
    { 
        $current = $this_NegativeNumber_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePositiveNumber
entryRulePositiveNumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPositiveNumberRule()); }
	 iv_rulePositiveNumber=rulePositiveNumber 
	 { $current=$iv_rulePositiveNumber.current; } 
	 EOF 
;

// Rule PositiveNumber
rulePositiveNumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPositiveNumberAccess().getIntegerParserRuleCall_0()); 
    }
    this_Integer_0=ruleInteger
    { 
        $current = $this_Integer_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPositiveNumberAccess().getFractionNumeratorAction_1_0(),
            $current);
    }
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPositiveNumberAccess().getSolidusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPositiveNumberAccess().getDenominatorIntegerParserRuleCall_1_2_0()); 
	    }
		lv_denominator_3_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPositiveNumberRule());
	        }
       		set(
       			$current, 
       			"denominator",
        		lv_denominator_3_0, 
        		"Integer");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleInteger
entryRuleInteger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); }
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current; } 
	 EOF 
;

// Rule Integer
ruleInteger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntegerAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleNegativeNumber
entryRuleNegativeNumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegativeNumberRule()); }
	 iv_ruleNegativeNumber=ruleNegativeNumber 
	 { $current=$iv_ruleNegativeNumber.current; } 
	 EOF 
;

// Rule NegativeNumber
ruleNegativeNumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNegativeNumberAccess().getHyphenMinusKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getNegativeNumberAccess().getPositiveNumberParserRuleCall_1()); 
    }
    this_PositiveNumber_1=rulePositiveNumber
    { 
        $current = $this_PositiveNumber_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


