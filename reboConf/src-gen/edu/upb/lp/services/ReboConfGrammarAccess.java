/*
* generated by Xtext
*/
package edu.upb.lp.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ReboConfGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatrizInicialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitialMatrixParserRuleCall_1_0 = (RuleCall)cInitialAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cMatrizEsperadaKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExpectedAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExpectedMatrixParserRuleCall_2_0_1_0 = (RuleCall)cExpectedAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cCorreoEsperadoKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMailAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMailNumberParserRuleCall_2_1_1_0 = (RuleCall)cMailAssignment_2_1_1.eContents().get(0);
		
		//Configuration:
		//	"Matriz inicial:" initial=Matrix ("Matriz esperada:" expected=Matrix | "Correo esperado:" mail=Number)?;
		public ParserRule getRule() { return rule; }

		//"Matriz inicial:" initial=Matrix ("Matriz esperada:" expected=Matrix | "Correo esperado:" mail=Number)?
		public Group getGroup() { return cGroup; }

		//"Matriz inicial:"
		public Keyword getMatrizInicialKeyword_0() { return cMatrizInicialKeyword_0; }

		//initial=Matrix
		public Assignment getInitialAssignment_1() { return cInitialAssignment_1; }

		//Matrix
		public RuleCall getInitialMatrixParserRuleCall_1_0() { return cInitialMatrixParserRuleCall_1_0; }

		//("Matriz esperada:" expected=Matrix | "Correo esperado:" mail=Number)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"Matriz esperada:" expected=Matrix
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"Matriz esperada:"
		public Keyword getMatrizEsperadaKeyword_2_0_0() { return cMatrizEsperadaKeyword_2_0_0; }

		//expected=Matrix
		public Assignment getExpectedAssignment_2_0_1() { return cExpectedAssignment_2_0_1; }

		//Matrix
		public RuleCall getExpectedMatrixParserRuleCall_2_0_1_0() { return cExpectedMatrixParserRuleCall_2_0_1_0; }

		//"Correo esperado:" mail=Number
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"Correo esperado:"
		public Keyword getCorreoEsperadoKeyword_2_1_0() { return cCorreoEsperadoKeyword_2_1_0; }

		//mail=Number
		public Assignment getMailAssignment_2_1_1() { return cMailAssignment_2_1_1; }

		//Number
		public RuleCall getMailNumberParserRuleCall_2_1_1_0() { return cMailNumberParserRuleCall_2_1_1_0; }
	}

	public class MatrixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Matrix");
		private final Assignment cLinesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLinesLineParserRuleCall_0 = (RuleCall)cLinesAssignment.eContents().get(0);
		
		//Matrix:
		//	lines+=Line+;
		public ParserRule getRule() { return rule; }

		//lines+=Line+
		public Assignment getLinesAssignment() { return cLinesAssignment; }

		//Line
		public RuleCall getLinesLineParserRuleCall_0() { return cLinesLineParserRuleCall_0; }
	}

	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElsElementParserRuleCall_0_0 = (RuleCall)cElsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElsElementParserRuleCall_1_1_0 = (RuleCall)cElsAssignment_1_1.eContents().get(0);
		
		//Line:
		//	els+=Element ("," els+=Element)*;
		public ParserRule getRule() { return rule; }

		//els+=Element ("," els+=Element)*
		public Group getGroup() { return cGroup; }

		//els+=Element
		public Assignment getElsAssignment_0() { return cElsAssignment_0; }

		//Element
		public RuleCall getElsElementParserRuleCall_0_0() { return cElsElementParserRuleCall_0_0; }

		//("," els+=Element)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//els+=Element
		public Assignment getElsAssignment_1_1() { return cElsAssignment_1_1; }

		//Element
		public RuleCall getElsElementParserRuleCall_1_1_0() { return cElsElementParserRuleCall_1_1_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmptyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Number | Empty;
		public ParserRule getRule() { return rule; }

		//Number | Empty
		public Alternatives getAlternatives() { return cAlternatives; }

		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }

		//Empty
		public RuleCall getEmptyParserRuleCall_1() { return cEmptyParserRuleCall_1; }
	}

	public class EmptyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Empty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmptyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword c_Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Empty:
		//	{Empty} "_";
		public ParserRule getRule() { return rule; }

		//{Empty} "_"
		public Group getGroup() { return cGroup; }

		//{Empty}
		public Action getEmptyAction_0() { return cEmptyAction_0; }

		//"_"
		public Keyword get_Keyword_1() { return c_Keyword_1; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPositiveNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNegativeNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Number:
		//	PositiveNumber | NegativeNumber;
		public ParserRule getRule() { return rule; }

		//PositiveNumber | NegativeNumber
		public Alternatives getAlternatives() { return cAlternatives; }

		//PositiveNumber
		public RuleCall getPositiveNumberParserRuleCall_0() { return cPositiveNumberParserRuleCall_0; }

		//NegativeNumber
		public RuleCall getNegativeNumberParserRuleCall_1() { return cNegativeNumberParserRuleCall_1; }
	}

	public class PositiveNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PositiveNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFractionNumeratorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDenominatorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDenominatorIntegerParserRuleCall_1_2_0 = (RuleCall)cDenominatorAssignment_1_2.eContents().get(0);
		
		//PositiveNumber:
		//	Integer ({Fraction.numerator=current} "/" denominator=Integer)?;
		public ParserRule getRule() { return rule; }

		//Integer ({Fraction.numerator=current} "/" denominator=Integer)?
		public Group getGroup() { return cGroup; }

		//Integer
		public RuleCall getIntegerParserRuleCall_0() { return cIntegerParserRuleCall_0; }

		//({Fraction.numerator=current} "/" denominator=Integer)?
		public Group getGroup_1() { return cGroup_1; }

		//{Fraction.numerator=current}
		public Action getFractionNumeratorAction_1_0() { return cFractionNumeratorAction_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }

		//denominator=Integer
		public Assignment getDenominatorAssignment_1_2() { return cDenominatorAssignment_1_2; }

		//Integer
		public RuleCall getDenominatorIntegerParserRuleCall_1_2_0() { return cDenominatorIntegerParserRuleCall_1_2_0; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Integer:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class NegativeNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NegativeNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPositiveNumberParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//NegativeNumber:
		//	"-" PositiveNumber;
		public ParserRule getRule() { return rule; }

		//"-" PositiveNumber
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//PositiveNumber
		public RuleCall getPositiveNumberParserRuleCall_1() { return cPositiveNumberParserRuleCall_1; }
	}
	
	
	private ConfigurationElements pConfiguration;
	private MatrixElements pMatrix;
	private LineElements pLine;
	private ElementElements pElement;
	private EmptyElements pEmpty;
	private NumberElements pNumber;
	private PositiveNumberElements pPositiveNumber;
	private IntegerElements pInteger;
	private NegativeNumberElements pNegativeNumber;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReboConfGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.ReboConf".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Configuration:
	//	"Matriz inicial:" initial=Matrix ("Matriz esperada:" expected=Matrix | "Correo esperado:" mail=Number)?;
	public ConfigurationElements getConfigurationAccess() {
		return (pConfiguration != null) ? pConfiguration : (pConfiguration = new ConfigurationElements());
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}

	//Matrix:
	//	lines+=Line+;
	public MatrixElements getMatrixAccess() {
		return (pMatrix != null) ? pMatrix : (pMatrix = new MatrixElements());
	}
	
	public ParserRule getMatrixRule() {
		return getMatrixAccess().getRule();
	}

	//Line:
	//	els+=Element ("," els+=Element)*;
	public LineElements getLineAccess() {
		return (pLine != null) ? pLine : (pLine = new LineElements());
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}

	//Element:
	//	Number | Empty;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Empty:
	//	{Empty} "_";
	public EmptyElements getEmptyAccess() {
		return (pEmpty != null) ? pEmpty : (pEmpty = new EmptyElements());
	}
	
	public ParserRule getEmptyRule() {
		return getEmptyAccess().getRule();
	}

	//Number:
	//	PositiveNumber | NegativeNumber;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//PositiveNumber:
	//	Integer ({Fraction.numerator=current} "/" denominator=Integer)?;
	public PositiveNumberElements getPositiveNumberAccess() {
		return (pPositiveNumber != null) ? pPositiveNumber : (pPositiveNumber = new PositiveNumberElements());
	}
	
	public ParserRule getPositiveNumberRule() {
		return getPositiveNumberAccess().getRule();
	}

	//Integer:
	//	value=INT;
	public IntegerElements getIntegerAccess() {
		return (pInteger != null) ? pInteger : (pInteger = new IntegerElements());
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//NegativeNumber:
	//	"-" PositiveNumber;
	public NegativeNumberElements getNegativeNumberAccess() {
		return (pNegativeNumber != null) ? pNegativeNumber : (pNegativeNumber = new NegativeNumberElements());
	}
	
	public ParserRule getNegativeNumberRule() {
		return getNegativeNumberAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
