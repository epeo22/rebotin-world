/*
* generated by Xtext
*/
package edu.upb.lp.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import edu.upb.lp.services.RebotinolGrammarAccess;

public class RebotinolParser extends AbstractContentAssistParser {
	
	@Inject
	private RebotinolGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected edu.upb.lp.ui.contentassist.antlr.internal.InternalRebotinolParser createParser() {
		edu.upb.lp.ui.contentassist.antlr.internal.InternalRebotinolParser result = new edu.upb.lp.ui.contentassist.antlr.internal.InternalRebotinolParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getNonEmptyInstructionAccess().getAlternatives(), "rule__NonEmptyInstruction__Alternatives");
					put(grammarAccess.getComplexInstructionAccess().getAlternatives(), "rule__ComplexInstruction__Alternatives");
					put(grammarAccess.getEmptyInstructionTypeAccess().getAlternatives(), "rule__EmptyInstructionType__Alternatives");
					put(grammarAccess.getSumakAccess().getGroup(), "rule__Sumak__Group__0");
					put(grammarAccess.getMultkAccess().getGroup(), "rule__Multk__Group__0");
					put(grammarAccess.getIgualAccess().getGroup(), "rule__Igual__Group__0");
					put(grammarAccess.getIgualkAccess().getGroup(), "rule__Igualk__Group__0");
					put(grammarAccess.getDiferAccess().getGroup(), "rule__Difer__Group__0");
					put(grammarAccess.getDiferkAccess().getGroup(), "rule__Diferk__Group__0");
					put(grammarAccess.getMayorAccess().getGroup(), "rule__Mayor__Group__0");
					put(grammarAccess.getMayorkAccess().getGroup(), "rule__Mayork__Group__0");
					put(grammarAccess.getMenorAccess().getGroup(), "rule__Menor__Group__0");
					put(grammarAccess.getMenorkAccess().getGroup(), "rule__Menork__Group__0");
					put(grammarAccess.getRepetirnAccess().getGroup(), "rule__Repetirn__Group__0");
					put(grammarAccess.getRebotinolProgramAccess().getInstructionsAssignment(), "rule__RebotinolProgram__InstructionsAssignment");
					put(grammarAccess.getEmptyInstructionAccess().getTypeAssignment(), "rule__EmptyInstruction__TypeAssignment");
					put(grammarAccess.getSumakAccess().getValAssignment_1(), "rule__Sumak__ValAssignment_1");
					put(grammarAccess.getMultkAccess().getValAssignment_1(), "rule__Multk__ValAssignment_1");
					put(grammarAccess.getIgualAccess().getSubInstructionsAssignment_2(), "rule__Igual__SubInstructionsAssignment_2");
					put(grammarAccess.getIgualkAccess().getValAssignment_1(), "rule__Igualk__ValAssignment_1");
					put(grammarAccess.getIgualkAccess().getSubInstructionsAssignment_3(), "rule__Igualk__SubInstructionsAssignment_3");
					put(grammarAccess.getDiferAccess().getSubInstructionsAssignment_2(), "rule__Difer__SubInstructionsAssignment_2");
					put(grammarAccess.getDiferkAccess().getValAssignment_1(), "rule__Diferk__ValAssignment_1");
					put(grammarAccess.getDiferkAccess().getSubInstructionsAssignment_3(), "rule__Diferk__SubInstructionsAssignment_3");
					put(grammarAccess.getMayorAccess().getSubInstructionsAssignment_2(), "rule__Mayor__SubInstructionsAssignment_2");
					put(grammarAccess.getMayorkAccess().getValAssignment_1(), "rule__Mayork__ValAssignment_1");
					put(grammarAccess.getMayorkAccess().getSubInstructionsAssignment_3(), "rule__Mayork__SubInstructionsAssignment_3");
					put(grammarAccess.getMenorAccess().getSubInstructionsAssignment_2(), "rule__Menor__SubInstructionsAssignment_2");
					put(grammarAccess.getMenorkAccess().getValAssignment_1(), "rule__Menork__ValAssignment_1");
					put(grammarAccess.getMenorkAccess().getSubInstructionsAssignment_3(), "rule__Menork__SubInstructionsAssignment_3");
					put(grammarAccess.getRepetirnAccess().getValAssignment_1(), "rule__Repetirn__ValAssignment_1");
					put(grammarAccess.getRepetirnAccess().getSubInstructionsAssignment_3(), "rule__Repetirn__SubInstructionsAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			edu.upb.lp.ui.contentassist.antlr.internal.InternalRebotinolParser typedParser = (edu.upb.lp.ui.contentassist.antlr.internal.InternalRebotinolParser) parser;
			typedParser.entryRuleRebotinolProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RebotinolGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RebotinolGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
