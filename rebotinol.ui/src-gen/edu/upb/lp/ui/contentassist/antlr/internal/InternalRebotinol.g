/*
* generated by Xtext
*/
grammar InternalRebotinol;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package edu.upb.lp.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.upb.lp.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import edu.upb.lp.services.RebotinolGrammarAccess;

}

@parser::members {
 
 	private RebotinolGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(RebotinolGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRebotinolProgram
entryRuleRebotinolProgram 
:
{ before(grammarAccess.getRebotinolProgramRule()); }
	 ruleRebotinolProgram
{ after(grammarAccess.getRebotinolProgramRule()); } 
	 EOF 
;

// Rule RebotinolProgram
ruleRebotinolProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getRebotinolProgramAccess().getInstructionsAssignment()); }
(rule__RebotinolProgram__InstructionsAssignment)
{ after(grammarAccess.getRebotinolProgramAccess().getInstructionsAssignment()); }
)
(
{ before(grammarAccess.getRebotinolProgramAccess().getInstructionsAssignment()); }
(rule__RebotinolProgram__InstructionsAssignment)*
{ after(grammarAccess.getRebotinolProgramAccess().getInstructionsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEmptyInstruction
entryRuleEmptyInstruction 
:
{ before(grammarAccess.getEmptyInstructionRule()); }
	 ruleEmptyInstruction
{ after(grammarAccess.getEmptyInstructionRule()); } 
	 EOF 
;

// Rule EmptyInstruction
ruleEmptyInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEmptyInstructionAccess().getTypeAssignment()); }
(rule__EmptyInstruction__TypeAssignment)
{ after(grammarAccess.getEmptyInstructionAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNonEmptyInstruction
entryRuleNonEmptyInstruction 
:
{ before(grammarAccess.getNonEmptyInstructionRule()); }
	 ruleNonEmptyInstruction
{ after(grammarAccess.getNonEmptyInstructionRule()); } 
	 EOF 
;

// Rule NonEmptyInstruction
ruleNonEmptyInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNonEmptyInstructionAccess().getAlternatives()); }
(rule__NonEmptyInstruction__Alternatives)
{ after(grammarAccess.getNonEmptyInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComplexInstruction
entryRuleComplexInstruction 
:
{ before(grammarAccess.getComplexInstructionRule()); }
	 ruleComplexInstruction
{ after(grammarAccess.getComplexInstructionRule()); } 
	 EOF 
;

// Rule ComplexInstruction
ruleComplexInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComplexInstructionAccess().getAlternatives()); }
(rule__ComplexInstruction__Alternatives)
{ after(grammarAccess.getComplexInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSumak
entryRuleSumak 
:
{ before(grammarAccess.getSumakRule()); }
	 ruleSumak
{ after(grammarAccess.getSumakRule()); } 
	 EOF 
;

// Rule Sumak
ruleSumak
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSumakAccess().getGroup()); }
(rule__Sumak__Group__0)
{ after(grammarAccess.getSumakAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultk
entryRuleMultk 
:
{ before(grammarAccess.getMultkRule()); }
	 ruleMultk
{ after(grammarAccess.getMultkRule()); } 
	 EOF 
;

// Rule Multk
ruleMultk
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultkAccess().getGroup()); }
(rule__Multk__Group__0)
{ after(grammarAccess.getMultkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIgual
entryRuleIgual 
:
{ before(grammarAccess.getIgualRule()); }
	 ruleIgual
{ after(grammarAccess.getIgualRule()); } 
	 EOF 
;

// Rule Igual
ruleIgual
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIgualAccess().getGroup()); }
(rule__Igual__Group__0)
{ after(grammarAccess.getIgualAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIgualk
entryRuleIgualk 
:
{ before(grammarAccess.getIgualkRule()); }
	 ruleIgualk
{ after(grammarAccess.getIgualkRule()); } 
	 EOF 
;

// Rule Igualk
ruleIgualk
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIgualkAccess().getGroup()); }
(rule__Igualk__Group__0)
{ after(grammarAccess.getIgualkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDifer
entryRuleDifer 
:
{ before(grammarAccess.getDiferRule()); }
	 ruleDifer
{ after(grammarAccess.getDiferRule()); } 
	 EOF 
;

// Rule Difer
ruleDifer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDiferAccess().getGroup()); }
(rule__Difer__Group__0)
{ after(grammarAccess.getDiferAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDiferk
entryRuleDiferk 
:
{ before(grammarAccess.getDiferkRule()); }
	 ruleDiferk
{ after(grammarAccess.getDiferkRule()); } 
	 EOF 
;

// Rule Diferk
ruleDiferk
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDiferkAccess().getGroup()); }
(rule__Diferk__Group__0)
{ after(grammarAccess.getDiferkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMayor
entryRuleMayor 
:
{ before(grammarAccess.getMayorRule()); }
	 ruleMayor
{ after(grammarAccess.getMayorRule()); } 
	 EOF 
;

// Rule Mayor
ruleMayor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMayorAccess().getGroup()); }
(rule__Mayor__Group__0)
{ after(grammarAccess.getMayorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMayork
entryRuleMayork 
:
{ before(grammarAccess.getMayorkRule()); }
	 ruleMayork
{ after(grammarAccess.getMayorkRule()); } 
	 EOF 
;

// Rule Mayork
ruleMayork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMayorkAccess().getGroup()); }
(rule__Mayork__Group__0)
{ after(grammarAccess.getMayorkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMenor
entryRuleMenor 
:
{ before(grammarAccess.getMenorRule()); }
	 ruleMenor
{ after(grammarAccess.getMenorRule()); } 
	 EOF 
;

// Rule Menor
ruleMenor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMenorAccess().getGroup()); }
(rule__Menor__Group__0)
{ after(grammarAccess.getMenorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMenork
entryRuleMenork 
:
{ before(grammarAccess.getMenorkRule()); }
	 ruleMenork
{ after(grammarAccess.getMenorkRule()); } 
	 EOF 
;

// Rule Menork
ruleMenork
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMenorkAccess().getGroup()); }
(rule__Menork__Group__0)
{ after(grammarAccess.getMenorkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRepetirn
entryRuleRepetirn 
:
{ before(grammarAccess.getRepetirnRule()); }
	 ruleRepetirn
{ after(grammarAccess.getRepetirnRule()); } 
	 EOF 
;

// Rule Repetirn
ruleRepetirn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRepetirnAccess().getGroup()); }
(rule__Repetirn__Group__0)
{ after(grammarAccess.getRepetirnAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule EmptyInstructionType
ruleEmptyInstructionType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getAlternatives()); }
(rule__EmptyInstructionType__Alternatives)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getEmptyInstructionParserRuleCall_0()); }
	ruleEmptyInstruction
{ after(grammarAccess.getInstructionAccess().getEmptyInstructionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getNonEmptyInstructionParserRuleCall_1()); }
	ruleNonEmptyInstruction
{ after(grammarAccess.getInstructionAccess().getNonEmptyInstructionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NonEmptyInstruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNonEmptyInstructionAccess().getSumakParserRuleCall_0()); }
	ruleSumak
{ after(grammarAccess.getNonEmptyInstructionAccess().getSumakParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNonEmptyInstructionAccess().getMultkParserRuleCall_1()); }
	ruleMultk
{ after(grammarAccess.getNonEmptyInstructionAccess().getMultkParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNonEmptyInstructionAccess().getComplexInstructionParserRuleCall_2()); }
	ruleComplexInstruction
{ after(grammarAccess.getNonEmptyInstructionAccess().getComplexInstructionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexInstruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexInstructionAccess().getIgualParserRuleCall_0()); }
	ruleIgual
{ after(grammarAccess.getComplexInstructionAccess().getIgualParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getComplexInstructionAccess().getIgualkParserRuleCall_1()); }
	ruleIgualk
{ after(grammarAccess.getComplexInstructionAccess().getIgualkParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getComplexInstructionAccess().getDiferParserRuleCall_2()); }
	ruleDifer
{ after(grammarAccess.getComplexInstructionAccess().getDiferParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getComplexInstructionAccess().getDiferkParserRuleCall_3()); }
	ruleDiferk
{ after(grammarAccess.getComplexInstructionAccess().getDiferkParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getComplexInstructionAccess().getMayorParserRuleCall_4()); }
	ruleMayor
{ after(grammarAccess.getComplexInstructionAccess().getMayorParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getComplexInstructionAccess().getMayorkParserRuleCall_5()); }
	ruleMayork
{ after(grammarAccess.getComplexInstructionAccess().getMayorkParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getComplexInstructionAccess().getMenorParserRuleCall_6()); }
	ruleMenor
{ after(grammarAccess.getComplexInstructionAccess().getMenorParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getComplexInstructionAccess().getMenorkParserRuleCall_7()); }
	ruleMenork
{ after(grammarAccess.getComplexInstructionAccess().getMenorkParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getComplexInstructionAccess().getRepetirnParserRuleCall_8()); }
	ruleRepetirn
{ after(grammarAccess.getComplexInstructionAccess().getRepetirnParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyInstructionType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getDerEnumLiteralDeclaration_0()); }
(	'DER' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getDerEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getIzqEnumLiteralDeclaration_1()); }
(	'IZQ' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getIzqEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getArrEnumLiteralDeclaration_2()); }
(	'ARR' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getArrEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getAbaEnumLiteralDeclaration_3()); }
(	'ABA' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getAbaEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getMemoEnumLiteralDeclaration_4()); }
(	'MEMO' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getMemoEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getEscriEnumLiteralDeclaration_5()); }
(	'ESCRI' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getEscriEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getSumaEnumLiteralDeclaration_6()); }
(	'SUMA' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getSumaEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getSignoEnumLiteralDeclaration_7()); }
(	'SIGNO' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getSignoEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getMultEnumLiteralDeclaration_8()); }
(	'MULT' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getMultEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getInverEnumLiteralDeclaration_9()); }
(	'INVER' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getInverEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getEnviarEnumLiteralDeclaration_10()); }
(	'ENVIAR' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getEnviarEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getEnviarCintaEnumLiteralDeclaration_11()); }
(	'ENVIAR CINTA' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getEnviarCintaEnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getEmptyInstructionTypeAccess().getEnviarMatrizEnumLiteralDeclaration_12()); }
(	'ENVIAR MATRIZ' 
)
{ after(grammarAccess.getEmptyInstructionTypeAccess().getEnviarMatrizEnumLiteralDeclaration_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Sumak__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sumak__Group__0__Impl
	rule__Sumak__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumak__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumakAccess().getSUMAKeyword_0()); }

	'SUMA' 

{ after(grammarAccess.getSumakAccess().getSUMAKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sumak__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sumak__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sumak__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumakAccess().getValAssignment_1()); }
(rule__Sumak__ValAssignment_1)
{ after(grammarAccess.getSumakAccess().getValAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multk__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multk__Group__0__Impl
	rule__Multk__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multk__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultkAccess().getMULTKeyword_0()); }

	'MULT' 

{ after(grammarAccess.getMultkAccess().getMULTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multk__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multk__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multk__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultkAccess().getValAssignment_1()); }
(rule__Multk__ValAssignment_1)
{ after(grammarAccess.getMultkAccess().getValAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Igual__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Igual__Group__0__Impl
	rule__Igual__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Igual__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgualAccess().getIGUALKeyword_0()); }

	'IGUAL' 

{ after(grammarAccess.getIgualAccess().getIGUALKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Igual__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Igual__Group__1__Impl
	rule__Igual__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Igual__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgualAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getIgualAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Igual__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Igual__Group__2__Impl
	rule__Igual__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Igual__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getIgualAccess().getSubInstructionsAssignment_2()); }
(rule__Igual__SubInstructionsAssignment_2)
{ after(grammarAccess.getIgualAccess().getSubInstructionsAssignment_2()); }
)
(
{ before(grammarAccess.getIgualAccess().getSubInstructionsAssignment_2()); }
(rule__Igual__SubInstructionsAssignment_2)*
{ after(grammarAccess.getIgualAccess().getSubInstructionsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Igual__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Igual__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Igual__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgualAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getIgualAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Igualk__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Igualk__Group__0__Impl
	rule__Igualk__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Igualk__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgualkAccess().getIGUALKeyword_0()); }

	'IGUAL' 

{ after(grammarAccess.getIgualkAccess().getIGUALKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Igualk__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Igualk__Group__1__Impl
	rule__Igualk__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Igualk__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgualkAccess().getValAssignment_1()); }
(rule__Igualk__ValAssignment_1)
{ after(grammarAccess.getIgualkAccess().getValAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Igualk__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Igualk__Group__2__Impl
	rule__Igualk__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Igualk__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgualkAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getIgualkAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Igualk__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Igualk__Group__3__Impl
	rule__Igualk__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Igualk__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getIgualkAccess().getSubInstructionsAssignment_3()); }
(rule__Igualk__SubInstructionsAssignment_3)
{ after(grammarAccess.getIgualkAccess().getSubInstructionsAssignment_3()); }
)
(
{ before(grammarAccess.getIgualkAccess().getSubInstructionsAssignment_3()); }
(rule__Igualk__SubInstructionsAssignment_3)*
{ after(grammarAccess.getIgualkAccess().getSubInstructionsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Igualk__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Igualk__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Igualk__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgualkAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getIgualkAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Difer__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Difer__Group__0__Impl
	rule__Difer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Difer__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiferAccess().getDIFERKeyword_0()); }

	'DIFER' 

{ after(grammarAccess.getDiferAccess().getDIFERKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Difer__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Difer__Group__1__Impl
	rule__Difer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Difer__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiferAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getDiferAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Difer__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Difer__Group__2__Impl
	rule__Difer__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Difer__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getDiferAccess().getSubInstructionsAssignment_2()); }
(rule__Difer__SubInstructionsAssignment_2)
{ after(grammarAccess.getDiferAccess().getSubInstructionsAssignment_2()); }
)
(
{ before(grammarAccess.getDiferAccess().getSubInstructionsAssignment_2()); }
(rule__Difer__SubInstructionsAssignment_2)*
{ after(grammarAccess.getDiferAccess().getSubInstructionsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Difer__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Difer__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Difer__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiferAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getDiferAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Diferk__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Diferk__Group__0__Impl
	rule__Diferk__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Diferk__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiferkAccess().getDIFERKeyword_0()); }

	'DIFER' 

{ after(grammarAccess.getDiferkAccess().getDIFERKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Diferk__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Diferk__Group__1__Impl
	rule__Diferk__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Diferk__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiferkAccess().getValAssignment_1()); }
(rule__Diferk__ValAssignment_1)
{ after(grammarAccess.getDiferkAccess().getValAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Diferk__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Diferk__Group__2__Impl
	rule__Diferk__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Diferk__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiferkAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getDiferkAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Diferk__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Diferk__Group__3__Impl
	rule__Diferk__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Diferk__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getDiferkAccess().getSubInstructionsAssignment_3()); }
(rule__Diferk__SubInstructionsAssignment_3)
{ after(grammarAccess.getDiferkAccess().getSubInstructionsAssignment_3()); }
)
(
{ before(grammarAccess.getDiferkAccess().getSubInstructionsAssignment_3()); }
(rule__Diferk__SubInstructionsAssignment_3)*
{ after(grammarAccess.getDiferkAccess().getSubInstructionsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Diferk__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Diferk__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Diferk__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiferkAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getDiferkAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Mayor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mayor__Group__0__Impl
	rule__Mayor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mayor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMayorAccess().getMAYORKeyword_0()); }

	'MAYOR' 

{ after(grammarAccess.getMayorAccess().getMAYORKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mayor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mayor__Group__1__Impl
	rule__Mayor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mayor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMayorAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getMayorAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mayor__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mayor__Group__2__Impl
	rule__Mayor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mayor__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMayorAccess().getSubInstructionsAssignment_2()); }
(rule__Mayor__SubInstructionsAssignment_2)
{ after(grammarAccess.getMayorAccess().getSubInstructionsAssignment_2()); }
)
(
{ before(grammarAccess.getMayorAccess().getSubInstructionsAssignment_2()); }
(rule__Mayor__SubInstructionsAssignment_2)*
{ after(grammarAccess.getMayorAccess().getSubInstructionsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mayor__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mayor__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mayor__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMayorAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getMayorAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Mayork__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mayork__Group__0__Impl
	rule__Mayork__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mayork__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMayorkAccess().getMAYORKeyword_0()); }

	'MAYOR' 

{ after(grammarAccess.getMayorkAccess().getMAYORKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mayork__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mayork__Group__1__Impl
	rule__Mayork__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mayork__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMayorkAccess().getValAssignment_1()); }
(rule__Mayork__ValAssignment_1)
{ after(grammarAccess.getMayorkAccess().getValAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mayork__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mayork__Group__2__Impl
	rule__Mayork__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mayork__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMayorkAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getMayorkAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mayork__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mayork__Group__3__Impl
	rule__Mayork__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mayork__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMayorkAccess().getSubInstructionsAssignment_3()); }
(rule__Mayork__SubInstructionsAssignment_3)
{ after(grammarAccess.getMayorkAccess().getSubInstructionsAssignment_3()); }
)
(
{ before(grammarAccess.getMayorkAccess().getSubInstructionsAssignment_3()); }
(rule__Mayork__SubInstructionsAssignment_3)*
{ after(grammarAccess.getMayorkAccess().getSubInstructionsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mayork__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mayork__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mayork__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMayorkAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getMayorkAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Menor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Menor__Group__0__Impl
	rule__Menor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Menor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMenorAccess().getMENORKeyword_0()); }

	'MENOR' 

{ after(grammarAccess.getMenorAccess().getMENORKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Menor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Menor__Group__1__Impl
	rule__Menor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Menor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMenorAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getMenorAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Menor__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Menor__Group__2__Impl
	rule__Menor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Menor__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMenorAccess().getSubInstructionsAssignment_2()); }
(rule__Menor__SubInstructionsAssignment_2)
{ after(grammarAccess.getMenorAccess().getSubInstructionsAssignment_2()); }
)
(
{ before(grammarAccess.getMenorAccess().getSubInstructionsAssignment_2()); }
(rule__Menor__SubInstructionsAssignment_2)*
{ after(grammarAccess.getMenorAccess().getSubInstructionsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Menor__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Menor__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Menor__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMenorAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getMenorAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Menork__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Menork__Group__0__Impl
	rule__Menork__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Menork__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMenorkAccess().getMENORKeyword_0()); }

	'MENOR' 

{ after(grammarAccess.getMenorkAccess().getMENORKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Menork__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Menork__Group__1__Impl
	rule__Menork__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Menork__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMenorkAccess().getValAssignment_1()); }
(rule__Menork__ValAssignment_1)
{ after(grammarAccess.getMenorkAccess().getValAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Menork__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Menork__Group__2__Impl
	rule__Menork__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Menork__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMenorkAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getMenorkAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Menork__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Menork__Group__3__Impl
	rule__Menork__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Menork__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMenorkAccess().getSubInstructionsAssignment_3()); }
(rule__Menork__SubInstructionsAssignment_3)
{ after(grammarAccess.getMenorkAccess().getSubInstructionsAssignment_3()); }
)
(
{ before(grammarAccess.getMenorkAccess().getSubInstructionsAssignment_3()); }
(rule__Menork__SubInstructionsAssignment_3)*
{ after(grammarAccess.getMenorkAccess().getSubInstructionsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Menork__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Menork__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Menork__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMenorkAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getMenorkAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Repetirn__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Repetirn__Group__0__Impl
	rule__Repetirn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetirn__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepetirnAccess().getREPKeyword_0()); }

	'REP' 

{ after(grammarAccess.getRepetirnAccess().getREPKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Repetirn__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Repetirn__Group__1__Impl
	rule__Repetirn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetirn__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepetirnAccess().getValAssignment_1()); }
(rule__Repetirn__ValAssignment_1)
{ after(grammarAccess.getRepetirnAccess().getValAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Repetirn__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Repetirn__Group__2__Impl
	rule__Repetirn__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetirn__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepetirnAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getRepetirnAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Repetirn__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Repetirn__Group__3__Impl
	rule__Repetirn__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetirn__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRepetirnAccess().getSubInstructionsAssignment_3()); }
(rule__Repetirn__SubInstructionsAssignment_3)
{ after(grammarAccess.getRepetirnAccess().getSubInstructionsAssignment_3()); }
)
(
{ before(grammarAccess.getRepetirnAccess().getSubInstructionsAssignment_3()); }
(rule__Repetirn__SubInstructionsAssignment_3)*
{ after(grammarAccess.getRepetirnAccess().getSubInstructionsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Repetirn__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Repetirn__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Repetirn__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepetirnAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getRepetirnAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__RebotinolProgram__InstructionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRebotinolProgramAccess().getInstructionsInstructionParserRuleCall_0()); }
	ruleInstruction{ after(grammarAccess.getRebotinolProgramAccess().getInstructionsInstructionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EmptyInstruction__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmptyInstructionAccess().getTypeEmptyInstructionTypeEnumRuleCall_0()); }
	ruleEmptyInstructionType{ after(grammarAccess.getEmptyInstructionAccess().getTypeEmptyInstructionTypeEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sumak__ValAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumakAccess().getValINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getSumakAccess().getValINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multk__ValAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultkAccess().getValINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getMultkAccess().getValINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Igual__SubInstructionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgualAccess().getSubInstructionsInstructionParserRuleCall_2_0()); }
	ruleInstruction{ after(grammarAccess.getIgualAccess().getSubInstructionsInstructionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Igualk__ValAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgualkAccess().getValINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getIgualkAccess().getValINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Igualk__SubInstructionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIgualkAccess().getSubInstructionsInstructionParserRuleCall_3_0()); }
	ruleInstruction{ after(grammarAccess.getIgualkAccess().getSubInstructionsInstructionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Difer__SubInstructionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiferAccess().getSubInstructionsInstructionParserRuleCall_2_0()); }
	ruleInstruction{ after(grammarAccess.getDiferAccess().getSubInstructionsInstructionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Diferk__ValAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiferkAccess().getValINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getDiferkAccess().getValINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Diferk__SubInstructionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiferkAccess().getSubInstructionsInstructionParserRuleCall_3_0()); }
	ruleInstruction{ after(grammarAccess.getDiferkAccess().getSubInstructionsInstructionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mayor__SubInstructionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMayorAccess().getSubInstructionsInstructionParserRuleCall_2_0()); }
	ruleInstruction{ after(grammarAccess.getMayorAccess().getSubInstructionsInstructionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mayork__ValAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMayorkAccess().getValINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getMayorkAccess().getValINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mayork__SubInstructionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMayorkAccess().getSubInstructionsInstructionParserRuleCall_3_0()); }
	ruleInstruction{ after(grammarAccess.getMayorkAccess().getSubInstructionsInstructionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Menor__SubInstructionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMenorAccess().getSubInstructionsInstructionParserRuleCall_2_0()); }
	ruleInstruction{ after(grammarAccess.getMenorAccess().getSubInstructionsInstructionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Menork__ValAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMenorkAccess().getValINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getMenorkAccess().getValINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Menork__SubInstructionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMenorkAccess().getSubInstructionsInstructionParserRuleCall_3_0()); }
	ruleInstruction{ after(grammarAccess.getMenorkAccess().getSubInstructionsInstructionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Repetirn__ValAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepetirnAccess().getValINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getRepetirnAccess().getValINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Repetirn__SubInstructionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepetirnAccess().getSubInstructionsInstructionParserRuleCall_3_0()); }
	ruleInstruction{ after(grammarAccess.getRepetirnAccess().getSubInstructionsInstructionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


