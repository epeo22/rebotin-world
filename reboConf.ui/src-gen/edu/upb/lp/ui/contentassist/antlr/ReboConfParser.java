/*
* generated by Xtext
*/
package edu.upb.lp.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import edu.upb.lp.services.ReboConfGrammarAccess;

public class ReboConfParser extends AbstractContentAssistParser {
	
	@Inject
	private ReboConfGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected edu.upb.lp.ui.contentassist.antlr.internal.InternalReboConfParser createParser() {
		edu.upb.lp.ui.contentassist.antlr.internal.InternalReboConfParser result = new edu.upb.lp.ui.contentassist.antlr.internal.InternalReboConfParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConfigurationAccess().getAlternatives_2(), "rule__Configuration__Alternatives_2");
					put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
					put(grammarAccess.getNumberAccess().getAlternatives(), "rule__Number__Alternatives");
					put(grammarAccess.getConfigurationAccess().getGroup(), "rule__Configuration__Group__0");
					put(grammarAccess.getConfigurationAccess().getGroup_2_0(), "rule__Configuration__Group_2_0__0");
					put(grammarAccess.getConfigurationAccess().getGroup_2_1(), "rule__Configuration__Group_2_1__0");
					put(grammarAccess.getLineAccess().getGroup(), "rule__Line__Group__0");
					put(grammarAccess.getLineAccess().getGroup_1(), "rule__Line__Group_1__0");
					put(grammarAccess.getEmptyAccess().getGroup(), "rule__Empty__Group__0");
					put(grammarAccess.getPositiveNumberAccess().getGroup(), "rule__PositiveNumber__Group__0");
					put(grammarAccess.getPositiveNumberAccess().getGroup_1(), "rule__PositiveNumber__Group_1__0");
					put(grammarAccess.getNegativeNumberAccess().getGroup(), "rule__NegativeNumber__Group__0");
					put(grammarAccess.getConfigurationAccess().getInitialAssignment_1(), "rule__Configuration__InitialAssignment_1");
					put(grammarAccess.getConfigurationAccess().getExpectedAssignment_2_0_1(), "rule__Configuration__ExpectedAssignment_2_0_1");
					put(grammarAccess.getConfigurationAccess().getMailAssignment_2_1_1(), "rule__Configuration__MailAssignment_2_1_1");
					put(grammarAccess.getMatrixAccess().getLinesAssignment(), "rule__Matrix__LinesAssignment");
					put(grammarAccess.getLineAccess().getElsAssignment_0(), "rule__Line__ElsAssignment_0");
					put(grammarAccess.getLineAccess().getElsAssignment_1_1(), "rule__Line__ElsAssignment_1_1");
					put(grammarAccess.getPositiveNumberAccess().getDenominatorAssignment_1_2(), "rule__PositiveNumber__DenominatorAssignment_1_2");
					put(grammarAccess.getIntegerAccess().getValueAssignment(), "rule__Integer__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			edu.upb.lp.ui.contentassist.antlr.internal.InternalReboConfParser typedParser = (edu.upb.lp.ui.contentassist.antlr.internal.InternalReboConfParser) parser;
			typedParser.entryRuleConfiguration();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ReboConfGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ReboConfGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
